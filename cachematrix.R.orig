## Put comments here that give an overall description of what your
## functions do
<<<<<<< HEAD
##The below two functions are coded for caching the inverse of a matrix

## Write a short comment describing this function
##makeCacheMatrix function creates a special "matrix" object that can cache its inverse

makeCacheMatrix <- function(x = matrix()) {
    inv_mat <- NULL
    set <- function(y) {
        x <<- y
        inv_mat <<- NULL
    }
    get <- function() x
    setinv <- function(inverse) inv_mat <<- inverse
    getinv <- function() inv_mat
    list(set = set, get = get,
         setinv = setinv,
         getinv = getinv)
    
=======

## Write a short comment describing this function

makeCacheMatrix <- function(x = matrix()) {

>>>>>>> 7f657dd22ac20d22698c53b23f0057e1a12c09b7
}


## Write a short comment describing this function
<<<<<<< HEAD
## This function computes the inverse of the special "matrix" returned by 
## makeCacheMatrix above. If the inverse has already been calculated (and the matrix 
## has not changed), then the cachesolve should retrieve the inverse from the cache

cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
    inv_mat <- x$getinv()
    if(!is.null(inv_mat)) {
        message("getting cached data")
        return(inv_mat)
    }
    data <- x$get()
    inv_mat <- solve(data, ...)
    x$setinv(inv_mat)
    inv_mat
=======

cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
>>>>>>> 7f657dd22ac20d22698c53b23f0057e1a12c09b7
}
